{"version":3,"file":"transport.js","sourceRoot":"","sources":["../../src/transport.ts"],"names":[],"mappings":"AA8DA,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,OAAgB,EAAsB,EAAE,CACvE,OAAO,OAAO,KAAK,QAAQ;IAC3B,CAAC,CAAC,OAAO;IACT,SAAS,IAAI,OAAO;IACpB,OAAO,CAAC,OAAO,KAAK,KAAK,CAAC;AAE5B,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,OAAgB,EAA0B,EAAE,CAC3E,gBAAgB,CAAC,OAAO,CAAC;IACzB,QAAQ,IAAI,OAAO;IACnB,OAAO,OAAO,CAAC,MAAM,KAAK,QAAQ,CAAC;AAErC,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,OAAgB,EAA2B,EAAE,CAC7E,gBAAgB,CAAC,OAAO,CAAC;IACzB,IAAI,IAAI,OAAO;IACf,CAAC,OAAO,OAAO,CAAC,EAAE,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC","sourcesContent":["import type { JsonArray, JsonObject, JsonValue } from \"@dfinity/candid\";\n\nexport type JsonRPC = {\n  jsonrpc: \"2.0\";\n};\n\nexport type JsonError = {\n  code: number;\n  message: string;\n  data?: JsonValue;\n};\n\nexport type JsonRequest<\n  Method = string,\n  Params extends JsonObject | JsonArray = JsonObject | JsonArray,\n> = JsonRPC & {\n  id?: string | number; // Optional, not required for one way messages\n  method: Method;\n  params?: Params; // Arguments by either name or position\n};\n\nexport type JsonResponse<Result extends JsonValue = JsonValue> = JsonRPC & {\n  id: string | number;\n} & ({ result: Result } | { error: JsonError });\n\nexport type JsonResponseResult<T extends JsonResponse> = T extends {\n  result: infer S;\n}\n  ? S\n  : never;\n\nexport interface Connection {\n  connected: boolean;\n\n  addEventListener(event: \"disconnect\", listener: () => void): () => void;\n\n  connect(): Promise<void>;\n\n  disconnect(): Promise<void>;\n}\n\nexport interface Channel {\n  closed: boolean;\n\n  addEventListener(event: \"close\", listener: () => void): () => void;\n\n  addEventListener(\n    event: \"response\",\n    listener: (response: JsonResponse) => void,\n  ): () => void;\n\n  send(requests: JsonRequest): Promise<void>;\n\n  close(): Promise<void>;\n}\n\nexport interface Transport {\n  connection?: Connection;\n\n  establishChannel(): Promise<Channel>;\n}\n\nexport const isJsonRpcMessage = (message: unknown): message is JsonRPC =>\n  typeof message === \"object\" &&\n  !!message &&\n  \"jsonrpc\" in message &&\n  message.jsonrpc === \"2.0\";\n\nexport const isJsonRpcRequest = (message: unknown): message is JsonRequest =>\n  isJsonRpcMessage(message) &&\n  \"method\" in message &&\n  typeof message.method === \"string\";\n\nexport const isJsonRpcResponse = (message: unknown): message is JsonResponse =>\n  isJsonRpcMessage(message) &&\n  \"id\" in message &&\n  (typeof message.id === \"string\" || typeof message.id === \"number\");\n"]}