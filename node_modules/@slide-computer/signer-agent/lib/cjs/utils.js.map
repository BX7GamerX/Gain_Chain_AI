{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAAA,0CAOwB;AACxB,kDAA+C;AAYxC,MAAM,iBAAiB,GAAG,CAAC,UAAuB,EAAe,EAAE;IACxE,MAAM,OAAO,GAAG,YAAI,CAAC,MAAM,CAAqB,UAAU,CAAC,CAAC;IAC5D,MAAM,MAAM,GAAG,IAAI,cAAM,CAAC,CAAC,CAAC,CAAC;IAC7B,gFAAgF;IAChF,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,uCACK,OAAO,KACV,WAAW,EAAE,qBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAChD,cAAc,EAAE,MAAM,IACtB;AACJ,CAAC,CAAC;AAVW,QAAA,iBAAiB,qBAU5B;AAEK,MAAM,6BAA6B,GAAG,CAC3C,OAAyB,EACd,EAAE;IACb,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;QAC/D,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,IAAI,IAAI,KAAK,gBAAgB,EAAE,CAAC;YAC9B,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAc,CAAC;QAC1C,CAAC;IACH,CAAC;IACD,MAAM,KAAK,CAAC,0CAA0C,CAAC,CAAC;AAC1D,CAAC,CAAC;AAVW,QAAA,6BAA6B,iCAUxC;AAEK,MAAM,2BAA2B,GAAG,CACzC,SAAoB,EACF,EAAE,CAAC,CAAC;IACtB,KAAK,EAAE,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,SAAS,CAAC,CAAC;CACjE,CAAC,CAAC;AAJU,QAAA,2BAA2B,+BAIrC","sourcesContent":["import {\n  type CallRequest,\n  Cbor,\n  Expiry,\n  type ReadStateOptions,\n  type RequestId,\n  type SubmitRequestType,\n} from \"@dfinity/agent\";\nimport { Principal } from \"@dfinity/principal\";\nimport { BigNumber } from \"bignumber.js\";\n\ntype DecodedCallRequest = Record<string, any> & {\n  request_type: SubmitRequestType.Call;\n  canister_id: Uint8Array;\n  method_name: string;\n  arg: Uint8Array;\n  sender: Uint8Array;\n  ingress_expiry: BigNumber;\n};\n\nexport const decodeCallRequest = (contentMap: ArrayBuffer): CallRequest => {\n  const decoded = Cbor.decode<DecodedCallRequest>(contentMap);\n  const expiry = new Expiry(0);\n  // @ts-ignore Expiry class currently has no method to create instance from value\n  expiry._value = BigInt(decoded.ingress_expiry.toString(10));\n  return {\n    ...decoded,\n    canister_id: Principal.from(decoded.canister_id),\n    ingress_expiry: expiry,\n  };\n};\n\nexport const requestIdFromReadStateOptions = (\n  options: ReadStateOptions,\n): RequestId => {\n  if (options.paths.length === 1 && options.paths[0].length == 2) {\n    const path = new TextDecoder().decode(options.paths[0][0]);\n    if (path === \"request_status\") {\n      return options.paths[0][1] as RequestId;\n    }\n  }\n  throw Error(\"Request id could not be found in options\");\n};\n\nexport const requestIdToReadStateOptions = (\n  requestId: RequestId,\n): ReadStateOptions => ({\n  paths: [[new TextEncoder().encode(\"request_status\"), requestId]],\n});\n"]}