{"version":3,"file":"stoicTransport.js","sourceRoot":"","sources":["../../src/stoicTransport.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,iDAA4C;AAC5C,uDAAgF;AAGhF,MAAa,mBAAoB,SAAQ,KAAK;IAC5C,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,mBAAmB,CAAC,SAAS,CAAC,CAAC;IAC7D,CAAC;CACF;AALD,kDAKC;AAUD,MAAa,cAAc;IAMzB,YAAoB,UAA2B,EAAE,KAAiB;QAHzD,6CAA6B;QAC7B,wCAAmB;QAG1B,MAAM,UAAU,GAAG,CAAC,uBAAA,EAAc,kDAAwB,CAAC;QAC3D,uBAAA,EAAc,MAA2B,KAAK,8CAAA,CAAC;QAC/C,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,IAAI,mBAAmB,CAAC,qCAAqC,CAAC,CAAC;QACvE,CAAC;QACD,uBAAA,IAAI,8BAAe,UAAU,MAAA,CAAC;QAC9B,uBAAA,IAAI,yBAAU,KAAK,MAAA,CAAC;IACtB,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,uBAAA,IAAI,kCAAY,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,MAAM,CACjB,OAA+B;QAE/B,MAAM,UAAU,GAAG,MAAM,iCAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEzD,uBAAA,EAAc,MAA2B,IAAI,8CAAA,CAAC;QAC9C,OAAO,IAAI,EAAc,CAAC,UAAU,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,IAAI,CAAC,uBAAA,IAAI,kCAAY,CAAC,SAAS,EAAE,CAAC;YAChC,MAAM,IAAI,mBAAmB,CAAC,iCAAiC,CAAC,CAAC;QACnE,CAAC;QACD,OAAO,IAAI,2BAAY,CAAC,uBAAA,IAAI,kCAAY,EAAE,uBAAA,IAAI,6BAAO,CAAC,CAAC;IACzD,CAAC;;AAlCH,wCAmCC;;AAlCQ,kDAAmC,KAAK,EAAjB,CAAkB","sourcesContent":["import {type Channel, type Connection, type Transport,} from \"@slide-computer/signer\";\nimport {StoicChannel} from \"./stoicChannel\";\nimport {StoicConnection, type StoicConnectionOptions,} from \"./stoicConnection\";\nimport type {HttpAgent} from \"@dfinity/agent\";\n\nexport class StoicTransportError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, StoicTransportError.prototype);\n  }\n}\n\nexport interface StoicTransportOptions extends StoicConnectionOptions {\n  /**\n   * Optional, used to make canister calls\n   * @default uses {@link HttpAgent} by default\n   */\n  agent?: HttpAgent;\n}\n\nexport class StoicTransport implements Transport {\n  static #isInternalConstructing: boolean = false;\n\n  readonly #connection: StoicConnection;\n  readonly #agent?: HttpAgent;\n\n  private constructor(connection: StoicConnection, agent?: HttpAgent) {\n    const throwError = !StoicTransport.#isInternalConstructing;\n    StoicTransport.#isInternalConstructing = false;\n    if (throwError) {\n      throw new StoicTransportError(\"StoicTransport is not constructable\");\n    }\n    this.#connection = connection;\n    this.#agent = agent;\n  }\n\n  get connection(): Connection {\n    return this.#connection;\n  }\n\n  static async create(\n    options?: StoicTransportOptions,\n  ): Promise<StoicTransport> {\n    const connection = await StoicConnection.create(options);\n\n    StoicTransport.#isInternalConstructing = true;\n    return new StoicTransport(connection, options?.agent);\n  }\n\n  async establishChannel(): Promise<Channel> {\n    if (!this.#connection.connected) {\n      throw new StoicTransportError(\"StoicTransport is not connected\");\n    }\n    return new StoicChannel(this.#connection, this.#agent);\n  }\n}\n"]}