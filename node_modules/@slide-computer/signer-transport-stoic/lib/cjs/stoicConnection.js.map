{"version":3,"file":"stoicConnection.js","sourceRoot":"","sources":["../../src/stoicConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Connection } from \"@slide-computer/signer\";\nimport { StoicTransportError } from \"./stoicTransport\";\nimport {\n  Delegation,\n  DelegationChain,\n  ECDSAKeyIdentity,\n  Ed25519KeyIdentity,\n  isDelegationValid,\n} from \"@dfinity/identity\";\nimport {\n  getDelegationChain,\n  getIdentity,\n  IdbStorage,\n  removeDelegationChain,\n  setDelegationChain,\n  setIdentity,\n  type SignerStorage,\n} from \"@slide-computer/signer-storage\";\nimport { fromHex, requestIdOf, SignIdentity, toHex } from \"@dfinity/agent\";\nimport { PartialIdentity } from \"@dfinity/identity/lib/cjs/identity/partial\";\nimport { Principal } from \"@dfinity/principal\";\n\nconst ECDSA_KEY_LABEL = \"ECDSA\";\nconst ED25519_KEY_LABEL = \"Ed25519\";\ntype BaseKeyType = typeof ECDSA_KEY_LABEL | typeof ED25519_KEY_LABEL;\n\nconst IDENTITY_STORAGE_KEY = \"stoic-base-identity\";\nconst DELEGATION_STORAGE_KEY = \"stoic-delegation-chain\";\nconst ACCOUNTS_STORAGE_KEY = \"stoic-account-count\";\nconst STOIC_ORIGIN = \"https://www.stoicwallet.com\";\nconst STOIC_WINDOW = \"stoic\";\n\nexport interface StoicConnectionOptions {\n  /**\n   * Expiration of the connection in nanoseconds\n   * @default BigInt(8) hours * BigInt(3_600_000_000_000) nanoseconds\n   */\n  maxTimeToLive?: bigint;\n  /**\n   * An {@link SignIdentity} or {@link PartialIdentity} to authenticate via delegation.\n   */\n  identity?: SignIdentity | PartialIdentity;\n  /**\n   * type to use for the base key\n   * @default 'ECDSA'\n   * If you are using a custom storage provider that does not support CryptoKey storage,\n   * you should use 'Ed25519' as the key type, as it can serialize to a string\n   */\n  keyType?: BaseKeyType;\n  /**\n   * Optional storage with get, set, and remove\n   * @default Uses {@link IdbStorage} by default\n   */\n  storage?: SignerStorage;\n  /**\n   * Optional, used to generate random bytes and Stoic app CryptoKeyPair\n   * @default globalThis.crypto\n   */\n  crypto?: Pick<Crypto, \"getRandomValues\" | \"subtle\">;\n  /**\n   * Disconnect monitoring interval in ms\n   * @default 3000\n   */\n  disconnectMonitoringInterval?: number;\n}\n\nexport class StoicConnection implements Connection {\n  static #isInternalConstructing: boolean = false;\n\n  readonly #options: Required<StoicConnectionOptions>;\n  #delegationChain?: DelegationChain;\n  #accounts?: number;\n  #disconnectListeners = new Set<() => void>();\n  #disconnectMonitorInterval?: ReturnType<typeof setInterval>;\n\n  constructor(\n    options: Required<StoicConnectionOptions>,\n    delegationChain?: DelegationChain,\n    accounts?: number,\n  ) {\n    const throwError = !StoicConnection.#isInternalConstructing;\n    StoicConnection.#isInternalConstructing = false;\n    if (throwError) {\n      throw new StoicTransportError(\"StoicTransport is not constructable\");\n    }\n    this.#options = options;\n    this.#delegationChain = delegationChain;\n    this.#accounts = accounts;\n    if (this.connected) {\n      this.#monitorDisconnect();\n    }\n  }\n\n  get connected() {\n    if (!this.#delegationChain) {\n      return false;\n    }\n    return isDelegationValid(this.#delegationChain);\n  }\n\n  get identity() {\n    return this.#options.identity as SignIdentity;\n  }\n\n  get delegationChain() {\n    return this.#delegationChain;\n  }\n\n  get accounts() {\n    return this.#accounts;\n  }\n\n  static async create(\n    options?: StoicConnectionOptions,\n  ): Promise<StoicConnection> {\n    const maxTimeToLive =\n      options?.maxTimeToLive ?? BigInt(8) * BigInt(3_600_000_000_000);\n    const keyType = options?.keyType ?? ECDSA_KEY_LABEL;\n    const storage = options?.storage ?? new IdbStorage();\n    const crypto = options?.crypto ?? globalThis.crypto;\n    const disconnectMonitoringInterval =\n      options?.disconnectMonitoringInterval ?? 3000;\n    let identity =\n      options?.identity ?? (await getIdentity(IDENTITY_STORAGE_KEY, storage));\n    if (!identity) {\n      const createdIdentity = await (keyType === \"Ed25519\"\n        ? Ed25519KeyIdentity.generate(\n            crypto.getRandomValues(new Uint8Array(32)),\n          )\n        : ECDSAKeyIdentity.generate());\n      await setIdentity(IDENTITY_STORAGE_KEY, createdIdentity, storage);\n      identity = createdIdentity;\n    }\n    const delegationChain = await getDelegationChain(\n      DELEGATION_STORAGE_KEY,\n      storage,\n    );\n    const accounts = await storage.get(ACCOUNTS_STORAGE_KEY);\n\n    StoicConnection.#isInternalConstructing = true;\n    return new StoicConnection(\n      {\n        maxTimeToLive,\n        keyType,\n        identity,\n        storage,\n        crypto,\n        disconnectMonitoringInterval,\n      },\n      delegationChain,\n      accounts ? Number(accounts) : undefined,\n    );\n  }\n\n  async connect(): Promise<void> {\n    return new Promise<void>(async (resolve, reject) => {\n      this.#delegationChain = undefined;\n      const keypair: { current?: CryptoKeyPair } = {\n        current: await this.#options.crypto.subtle.generateKey(\n          {\n            name: \"ECDSA\",\n            namedCurve: \"P-384\",\n          },\n          false,\n          [\"sign\", \"verify\"],\n        ),\n      };\n      const apikey = toHex(\n        await this.#options.crypto.subtle.exportKey(\n          \"spki\",\n          keypair.current!.publicKey,\n        ),\n      );\n      const tunnel = document.createElement(\"iframe\");\n      tunnel.width = \"0\";\n      tunnel.height = \"0\";\n      tunnel.style.borderWidth = \"0\";\n      const delegation = new Delegation(\n        this.#options.identity.getPublicKey().toDer(),\n        BigInt(Date.now()) * BigInt(1_000_000) + this.#options.maxTimeToLive,\n      );\n      let publicKey: ArrayBuffer;\n      const complete = async () => {\n        window.removeEventListener(\"message\", listener);\n        document.body.removeChild(tunnel);\n        await setDelegationChain(\n          DELEGATION_STORAGE_KEY,\n          this.#delegationChain!,\n          this.#options.storage,\n        );\n        await this.#options.storage.set(\n          ACCOUNTS_STORAGE_KEY,\n          `${this.#accounts}`,\n        );\n        this.#monitorDisconnect();\n        resolve();\n      };\n      const listener = (event: MessageEvent) => {\n        if (!stoicWindow || event.origin !== STOIC_ORIGIN) {\n          return;\n        }\n        if (\n          event.source === tunnel.contentWindow &&\n          event.data.target === \"STOIC-EXT\"\n        ) {\n          if (!event.data.success) {\n            window.removeEventListener(\"message\", listener);\n            document.body.removeChild(tunnel);\n            reject(new StoicTransportError(event.data.data));\n            return;\n          }\n          switch (event.data.action) {\n            case \"accounts\":\n              this.#accounts = JSON.parse(event.data.data).length;\n              if (this.#delegationChain) {\n                complete();\n              }\n              break;\n            case \"sign\":\n              const data = JSON.parse(event.data.data);\n              const signature = fromHex(data.signed);\n              const previousDelegationChain =\n                data.chain && DelegationChain.fromJSON(data.chain);\n              this.#delegationChain = DelegationChain.fromDelegations(\n                [\n                  ...(previousDelegationChain?.delegations ?? []),\n                  { delegation, signature },\n                ],\n                publicKey,\n              );\n              if (this.#accounts) {\n                complete();\n              }\n              break;\n          }\n          return;\n        }\n        if (event.source !== stoicWindow) {\n          // All events below are expected to be received from stoicWindow\n          return;\n        }\n        switch (event.data.action) {\n          case \"initiateStoicConnect\":\n            // Request connection when window indicates its ready\n            stoicWindow.postMessage(\n              { action: \"requestAuthorization\", apikey },\n              STOIC_ORIGIN,\n            );\n            break;\n          case \"rejectAuthorization\":\n            // If the connection is rejected, throw an error\n            stoicWindow.close();\n            window.removeEventListener(\"message\", listener);\n            reject(new StoicTransportError(\"Connection is rejected\"));\n            break;\n          case \"confirmAuthorization\":\n            // Get public key from event\n            publicKey = new Uint8Array(Object.values(event.data.key)).buffer;\n            const principal = Principal.selfAuthenticating(\n              new Uint8Array(publicKey),\n            ).toText();\n\n            // Once the connection has been approved, close window\n            // and create iframe to get accounts and a delegation.\n            stoicWindow.close();\n            document.body.appendChild(tunnel);\n            tunnel.onload = async () => {\n              if (!tunnel.contentWindow) {\n                reject(\n                  new StoicTransportError(\"Tunnel could not be established\"),\n                );\n                return;\n              }\n              // Request accounts\n              tunnel.contentWindow.postMessage(\n                {\n                  target: \"STOIC-IFRAME\",\n                  action: \"accounts\",\n                  payload: \"accounts\",\n                  principal,\n                  apikey,\n                  sig: toHex(\n                    await window.crypto.subtle.sign(\n                      {\n                        name: \"ECDSA\",\n                        hash: { name: \"SHA-384\" },\n                      },\n                      keypair.current!.privateKey,\n                      new TextEncoder().encode(\"accounts\"),\n                    ),\n                  ),\n                },\n                STOIC_ORIGIN,\n              );\n              // Request delegation signature\n              const challenge = toHex(\n                new Uint8Array([\n                  ...new TextEncoder().encode(\"\\x1Aic-request-auth-delegation\"),\n                  ...new Uint8Array(requestIdOf(delegation)),\n                ]).buffer,\n              );\n              tunnel.contentWindow.postMessage(\n                {\n                  target: \"STOIC-IFRAME\",\n                  action: \"sign\",\n                  payload: challenge,\n                  principal,\n                  apikey,\n                  sig: toHex(\n                    await window.crypto.subtle.sign(\n                      {\n                        name: \"ECDSA\",\n                        hash: { name: \"SHA-384\" },\n                      },\n                      keypair.current!.privateKey,\n                      new TextEncoder().encode(challenge),\n                    ),\n                  ),\n                },\n                STOIC_ORIGIN,\n              );\n\n              // Delete key pair after usage since its considered an unacceptable risk\n              // to keep a key around that gives full signing access to Stoic Wallet.\n              //\n              // It could be abused for example to create a delegation with an (in practice)\n              // indefinite expiration. By creating a delegation with a definite expiration\n              // and deleting the key pair, the risk is limited to a definite timeframe.\n              //\n              // Keep in mind other dapps could still abuse their own key pair for various malicious\n              // purposes, Stoic Wallet should be considered insecure for holding high value assets.\n              delete keypair.current;\n            };\n            tunnel.src = new URL(\"?stoicTunnel\", STOIC_ORIGIN).href;\n            break;\n        }\n      };\n      window.addEventListener(\"message\", listener);\n\n      // Open window to request connection\n      const stoicWindow = window.open(\n        new URL(\"?authorizeApp\", STOIC_ORIGIN),\n        STOIC_WINDOW,\n      );\n    });\n  }\n\n  async disconnect(): Promise<void> {\n    clearInterval(this.#disconnectMonitorInterval);\n    await removeDelegationChain(DELEGATION_STORAGE_KEY, this.#options.storage);\n    await this.#options.storage.remove(ACCOUNTS_STORAGE_KEY);\n    this.#delegationChain = undefined;\n    this.#accounts = undefined;\n    this.#disconnectListeners.forEach((listener) => listener());\n  }\n\n  addEventListener(event: \"disconnect\", listener: () => void): () => void {\n    switch (event) {\n      case \"disconnect\":\n        this.#disconnectListeners.add(listener);\n        return () => {\n          this.#disconnectListeners.delete(listener);\n        };\n    }\n  }\n\n  #monitorDisconnect() {\n    this.#disconnectMonitorInterval = setInterval(() => {\n      if (!this.connected) {\n        this.#disconnectListeners.forEach((listener) => listener());\n        clearInterval(this.#disconnectMonitorInterval);\n      }\n    }, this.#options.disconnectMonitoringInterval);\n  }\n}\n"]}