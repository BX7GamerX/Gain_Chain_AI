{"version":3,"file":"stoicChannel.js","sourceRoot":"","sources":["../../src/stoicChannel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type CallCanisterRequest,\n  type Channel,\n  type DelegationRequest,\n  fromBase64,\n  INVALID_REQUEST_ERROR,\n  isJsonRpcRequest,\n  type JsonRequest,\n  type JsonResponse,\n  NOT_SUPPORTED_ERROR,\n  toBase64,\n} from \"@slide-computer/signer\";\nimport { StoicTransportError } from \"./stoicTransport\";\nimport { scopes, supportedStandards } from \"./constants\";\nimport { DelegationChain, DelegationIdentity } from \"@dfinity/identity\";\nimport type { StoicConnection } from \"./stoicConnection\";\nimport { Cbor, HttpAgent, polling, type SignIdentity } from \"@dfinity/agent\";\nimport { Principal } from \"@dfinity/principal\";\n\nexport class StoicChannel implements Channel {\n  readonly #connection: StoicConnection;\n  readonly #agent?: HttpAgent;\n  readonly #closeListeners = new Set<() => void>();\n  readonly #responseListeners = new Set<(response: JsonResponse) => void>();\n  #closed: boolean = false;\n\n  constructor(connection: StoicConnection, agent?: HttpAgent) {\n    this.#connection = connection;\n    this.#agent = agent;\n\n    this.#connection.addEventListener(\n      \"disconnect\",\n      () => (this.#closed = true),\n    );\n  }\n\n  get closed() {\n    return this.#closed || !this.#connection.connected;\n  }\n\n  addEventListener(\n    ...[event, listener]:\n      | [event: \"close\", listener: () => void]\n      | [event: \"response\", listener: (response: JsonResponse) => void]\n  ): () => void {\n    switch (event) {\n      case \"close\":\n        this.#closeListeners.add(listener);\n        return () => {\n          this.#closeListeners.delete(listener);\n        };\n      case \"response\":\n        this.#responseListeners.add(listener);\n        return () => {\n          this.#responseListeners.delete(listener);\n        };\n    }\n  }\n\n  async send(request: JsonRequest): Promise<void> {\n    if (this.closed) {\n      throw new StoicTransportError(\"Communication channel is closed\");\n    }\n\n    // Ignore one way messages\n    const id = request.id;\n    if (id === undefined) {\n      return;\n    }\n\n    // Create response and call listeners\n    const response = await this.#createResponse({ id, ...request });\n    this.#responseListeners.forEach((listener) => listener(response));\n  }\n\n  async close(): Promise<void> {\n    this.#closed = true;\n    this.#closeListeners.forEach((listener) => listener());\n  }\n\n  async #createResponse(\n    request: JsonRequest & { id: NonNullable<JsonRequest[\"id\"]> },\n  ): Promise<JsonResponse> {\n    const id = request.id;\n\n    if (!isJsonRpcRequest(request)) {\n      return {\n        id,\n        jsonrpc: \"2.0\",\n        error: { code: INVALID_REQUEST_ERROR, message: \"Invalid request\" },\n      };\n    }\n\n    switch (request.method) {\n      case \"icrc25_supported_standards\":\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: { supportedStandards },\n        };\n      case \"icrc25_permissions\":\n      case \"icrc25_request_permissions\":\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: { scopes },\n        };\n      case \"icrc27_accounts\":\n        const owner = Principal.selfAuthenticating(\n          new Uint8Array(this.#connection.delegationChain!.publicKey),\n        ).toText();\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: {\n            accounts: Array.from({\n              length: this.#connection.accounts ?? 0,\n            }).map((_, index) => {\n              const buffer = new ArrayBuffer(32);\n              new DataView(buffer).setBigUint64(24, BigInt(index), false);\n              return {\n                owner,\n                subaccount: toBase64(buffer),\n              };\n            }),\n          },\n        };\n      case \"icrc34_delegation\":\n        const delegationRequest = request as DelegationRequest;\n        const identity = this.#connection.identity as SignIdentity;\n        const delegationChain = this.#connection.delegationChain!;\n        const expiration = new Date(\n          Date.now() +\n            Number(\n              delegationRequest.params!.maxTimeToLive\n                ? BigInt(delegationRequest.params!.maxTimeToLive) /\n                    BigInt(1_000_000)\n                : BigInt(8) * BigInt(3_600_000),\n            ),\n        );\n        const signedDelegationChain = await DelegationChain.create(\n          identity,\n          { toDer: () => fromBase64(delegationRequest.params!.publicKey) },\n          expiration,\n          {\n            previous: delegationChain,\n            targets: delegationRequest.params!.targets?.map((target) =>\n              Principal.fromText(target),\n            ),\n          },\n        );\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: {\n            publicKey: toBase64(signedDelegationChain.publicKey),\n            signerDelegation: signedDelegationChain.delegations.map(\n              ({ delegation, signature }) => ({\n                delegation: {\n                  pubkey: toBase64(delegation.pubkey),\n                  expiration: delegation.expiration.toString(),\n                  ...(delegation.targets\n                    ? {\n                        targets: delegation.targets.map((target) =>\n                          target.toText(),\n                        ),\n                      }\n                    : {}),\n                },\n                signature: toBase64(signature),\n              }),\n            ),\n          },\n        };\n      case \"icrc49_call_canister\":\n        const callCanisterRequest = request as CallCanisterRequest;\n        const { pollForResponse, defaultStrategy } = polling;\n        const canisterId = Principal.fromText(\n          callCanisterRequest.params!.canisterId,\n        );\n        const delegationIdentity = DelegationIdentity.fromDelegation(\n          this.#connection.identity,\n          this.#connection.delegationChain!,\n        );\n        if (\n          callCanisterRequest.params?.sender !==\n          delegationIdentity.getPrincipal().toString()\n        ) {\n          throw new StoicTransportError(\"Sender does not match Stoic identity\");\n        }\n        const agent = await HttpAgent.from(\n          this.#agent ?? (await HttpAgent.create()),\n        );\n        agent.replaceIdentity(delegationIdentity);\n        let contentMap: ArrayBuffer;\n        agent.addTransform(\"update\", async (agentRequest) => {\n          contentMap = Cbor.encode(agentRequest.body);\n          return agentRequest;\n        });\n        const submitResponse = await agent.call(canisterId, {\n          effectiveCanisterId: canisterId,\n          methodName: callCanisterRequest.params!.method,\n          arg: fromBase64(callCanisterRequest.params!.arg),\n        });\n        await pollForResponse(\n          agent,\n          canisterId,\n          submitResponse.requestId,\n          defaultStrategy(),\n        );\n        const { certificate } = await agent.readState(canisterId, {\n          paths: [\n            [\n              new TextEncoder().encode(\"request_status\"),\n              submitResponse.requestId,\n            ],\n          ],\n        });\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: {\n            contentMap: toBase64(contentMap!),\n            certificate: toBase64(certificate),\n          },\n        };\n      default:\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          error: { code: NOT_SUPPORTED_ERROR, message: \"Not supported\" },\n        };\n    }\n  }\n}\n"]}