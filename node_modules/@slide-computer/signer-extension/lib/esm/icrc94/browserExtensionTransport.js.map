{"version":3,"file":"browserExtensionTransport.js","sourceRoot":"","sources":["../../../src/icrc94/browserExtensionTransport.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAkB,MAAM,wBAAwB,CAAC;AACxD,OAAO,EACL,uBAAuB,GAExB,MAAM,2BAA2B,CAAC;AAGnC,MAAM,OAAO,8BAA+B,SAAQ,KAAK;IACvD,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,8BAA8B,CAAC,SAAS,CAAC,CAAC;IACxE,CAAC;CACF;AAwBD,MAAM,OAAO,yBAAyB;IAGpC,YAAY,OAAyC;QAF5C,qDAAqD;QAG5D,uBAAA,IAAI,sDACF,MAAM,EAAE,UAAU,CAAC,MAAM,IACtB,OAAO,OACX,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EACpB,iBAAiB,GAAG,GAAG,EACvB,MAAM,GAAG,UAAU,CAAC,MAAM,MACS,EAAE;QACrC,MAAM,eAAe,GAAqB,EAAE,CAAC;QAC7C,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,CAAC,KAAK,EAAE,EAAE;YAC3D,IACE,eAAe,CAAC,IAAI,CAClB,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI,CAC9D,EACD,CAAC;gBACD,mBAAmB;gBACnB,OAAO;YACT,CAAC;YACD,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,wBAAwB,CAAC,CAAC,CAAC;QAChE,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC;QACvE,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,aAAa,CACxB,OAAkD;QAElD,MAAM,eAAe,GAAG,MAAM,yBAAyB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC1E,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CACzC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CACpC,CAAC;QACF,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,8BAA8B,CACtC,0FAA0F,CAC3F,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,yBAAyB,iCAAM,OAAO,KAAE,cAAc,IAAG,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,IAAI,uBAAuB,CAAC,uBAAA,IAAI,0CAAS,CAAC,CAAC;IACpD,CAAC;CACF","sourcesContent":["import { type Transport } from \"@slide-computer/signer\";\nimport {\n  BrowserExtensionChannel,\n  type BrowserExtensionChannelOptions,\n} from \"./browserExtensionChannel\";\nimport type { ProviderDetail } from \"./types\";\n\nexport class BrowserExtensionTransportError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, BrowserExtensionTransportError.prototype);\n  }\n}\n\nexport interface BrowserExtensionTransportOptions\n  extends BrowserExtensionChannelOptions {}\n\nexport interface DiscoverBrowserExtensionOptions {\n  /**\n   * Time in milliseconds to wait for all browser extensions to send an icrc94:announceProvider event\n   * @default 100\n   */\n  discoveryDuration?: number;\n  /**\n   * Relying party window, used to listen for incoming events\n   * @default globalThis.window\n   */\n  window?: Window;\n}\n\nexport interface EstablishBrowserExtensionTransportOptions\n  extends DiscoverBrowserExtensionOptions,\n    Omit<BrowserExtensionTransportOptions, \"providerDetail\"> {\n  uuid: string;\n}\n\nexport class BrowserExtensionTransport implements Transport {\n  readonly #options: Required<BrowserExtensionTransportOptions>;\n\n  constructor(options: BrowserExtensionTransportOptions) {\n    this.#options = {\n      window: globalThis.window,\n      ...options,\n    };\n  }\n\n  static async discover({\n    discoveryDuration = 100,\n    window = globalThis.window,\n  }: DiscoverBrowserExtensionOptions = {}): Promise<ProviderDetail[]> {\n    const providerDetails: ProviderDetail[] = [];\n    window.addEventListener(\"icrc94:announceProvider\", (event) => {\n      if (\n        providerDetails.find(\n          (providerDetail) => providerDetail.uuid === event.detail.uuid,\n        )\n      ) {\n        // Avoid duplicates\n        return;\n      }\n      providerDetails.push(event.detail);\n    });\n    window.dispatchEvent(new CustomEvent(\"icrc94:requestProvider\"));\n    await new Promise((resolve) => setTimeout(resolve, discoveryDuration));\n    return providerDetails;\n  }\n\n  static async findTransport(\n    options: EstablishBrowserExtensionTransportOptions,\n  ): Promise<BrowserExtensionTransport> {\n    const providerDetails = await BrowserExtensionTransport.discover(options);\n    const providerDetail = providerDetails.find(\n      ({ uuid }) => uuid === options.uuid,\n    );\n    if (!providerDetail) {\n      throw new BrowserExtensionTransportError(\n        \"Browser extension couldn't be found, make sure it's installed and enabled for this page.\",\n      );\n    }\n    return new BrowserExtensionTransport({ ...options, providerDetail });\n  }\n\n  async establishChannel(): Promise<BrowserExtensionChannel> {\n    return new BrowserExtensionChannel(this.#options);\n  }\n}\n"]}