{"version":3,"file":"browserExtensionChannel.js","sourceRoot":"","sources":["../../../src/icrc94/browserExtensionChannel.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAEL,iBAAiB,GAGlB,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EAAE,8BAA8B,EAAE,MAAM,6BAA6B,CAAC;AAc7E,MAAM,OAAO,uBAAuB;IAMlC,YAAY,OAAuC;QAL1C,kDAAkB,IAAI,GAAG,EAAc,EAAC;QACxC,qDAAqB,IAAI,GAAG,EAAoC,EAAC;QACjE,mDAAmD;QAC5D,0CAAU,KAAK,EAAC;QAGd,uBAAA,IAAI,oDACF,MAAM,EAAE,UAAU,CAAC,MAAM,IACtB,OAAO,OACX,CAAC;QAEF,MAAM,aAAa,GAAG,GAAG,EAAE;YACzB,uBAAA,IAAI,wCAAS,CAAC,MAAM,CAAC,mBAAmB,CACtC,2BAA2B,EAC3B,aAAa,CACd,CAAC;YACF,uBAAA,IAAI,mCAAW,IAAI,MAAA,CAAC;YACpB,uBAAA,IAAI,+CAAgB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC;QACF,uBAAA,IAAI,wCAAS,CAAC,MAAM,CAAC,gBAAgB,CACnC,2BAA2B,EAC3B,aAAa,CACd,CAAC;IACJ,CAAC;IAED,IAAI,MAAM;QACR,OAAO,uBAAA,IAAI,uCAAQ,CAAC;IACtB,CAAC;IAED,gBAAgB,CACd,GAAG,CAAC,KAAK,EAAE,QAAQ,CAEgD;QAEnE,QAAQ,KAAK,EAAE,CAAC;YACd,KAAK,OAAO;gBACV,uBAAA,IAAI,+CAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACnC,OAAO,GAAG,EAAE;oBACV,uBAAA,IAAI,+CAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACxC,CAAC,CAAC;YACJ,KAAK,UAAU;gBACb,uBAAA,IAAI,kDAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtC,OAAO,GAAG,EAAE;oBACV,uBAAA,IAAI,kDAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC3C,CAAC,CAAC;QACN,CAAC;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAoB;QAC7B,IAAI,uBAAA,IAAI,uCAAQ,EAAE,CAAC;YACjB,MAAM,IAAI,8BAA8B,CACtC,iCAAiC,CAClC,CAAC;QACJ,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,uBAAA,IAAI,wCAAS,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACzE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjC,OAAO;QACT,CAAC;QACD,uBAAA,IAAI,kDAAmB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,uBAAA,IAAI,uCAAQ,EAAE,CAAC;YACjB,OAAO;QACT,CAAC;QACD,uBAAA,IAAI,mCAAW,IAAI,MAAA,CAAC;QACpB,MAAM,uBAAA,IAAI,wCAAS,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC7C,uBAAA,IAAI,+CAAgB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzD,CAAC;CACF","sourcesContent":["import {\n  type Channel,\n  isJsonRpcResponse,\n  type JsonRequest,\n  type JsonResponse,\n} from \"@slide-computer/signer\";\nimport type { ProviderDetail } from \"./types\";\nimport { BrowserExtensionTransportError } from \"./browserExtensionTransport\";\n\nexport interface BrowserExtensionChannelOptions {\n  /**\n   * Provider details received during browser extension discovery\n   */\n  providerDetail: ProviderDetail;\n  /**\n   * Relying party window, used to listen for incoming events\n   * @default globalThis.window\n   */\n  window?: Window;\n}\n\nexport class BrowserExtensionChannel implements Channel {\n  readonly #closeListeners = new Set<() => void>();\n  readonly #responseListeners = new Set<(response: JsonResponse) => void>();\n  readonly #options: Required<BrowserExtensionChannelOptions>;\n  #closed = false;\n\n  constructor(options: BrowserExtensionChannelOptions) {\n    this.#options = {\n      window: globalThis.window,\n      ...options,\n    };\n\n    const closeListener = () => {\n      this.#options.window.removeEventListener(\n        \"icrc94:unexpectedlyClosed\",\n        closeListener,\n      );\n      this.#closed = true;\n      this.#closeListeners.forEach((listener) => listener());\n    };\n    this.#options.window.addEventListener(\n      \"icrc94:unexpectedlyClosed\",\n      closeListener,\n    );\n  }\n\n  get closed() {\n    return this.#closed;\n  }\n\n  addEventListener(\n    ...[event, listener]:\n      | [event: \"close\", listener: () => void]\n      | [event: \"response\", listener: (response: JsonResponse) => void]\n  ): () => void {\n    switch (event) {\n      case \"close\":\n        this.#closeListeners.add(listener);\n        return () => {\n          this.#closeListeners.delete(listener);\n        };\n      case \"response\":\n        this.#responseListeners.add(listener);\n        return () => {\n          this.#responseListeners.delete(listener);\n        };\n    }\n  }\n\n  async send(request: JsonRequest): Promise<void> {\n    if (this.#closed) {\n      throw new BrowserExtensionTransportError(\n        \"Communication channel is closed\",\n      );\n    }\n\n    const response = await this.#options.providerDetail.sendMessage(request);\n    if (!isJsonRpcResponse(response)) {\n      return;\n    }\n    this.#responseListeners.forEach((listener) => listener(response));\n  }\n\n  async close(): Promise<void> {\n    if (this.#closed) {\n      return;\n    }\n    this.#closed = true;\n    await this.#options.providerDetail.dismiss();\n    this.#closeListeners.forEach((listener) => listener());\n  }\n}\n"]}