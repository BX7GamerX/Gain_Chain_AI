var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BrowserExtensionChannel_closeListeners, _BrowserExtensionChannel_responseListeners, _BrowserExtensionChannel_options, _BrowserExtensionChannel_closed;
import { isJsonRpcResponse, } from "@slide-computer/signer";
import { BrowserExtensionTransportError } from "./browserExtensionTransport";
export class BrowserExtensionChannel {
    constructor(options) {
        _BrowserExtensionChannel_closeListeners.set(this, new Set());
        _BrowserExtensionChannel_responseListeners.set(this, new Set());
        _BrowserExtensionChannel_options.set(this, void 0);
        _BrowserExtensionChannel_closed.set(this, false);
        __classPrivateFieldSet(this, _BrowserExtensionChannel_options, Object.assign({ window: globalThis.window }, options), "f");
        const closeListener = () => {
            __classPrivateFieldGet(this, _BrowserExtensionChannel_options, "f").window.removeEventListener("icrc94:unexpectedlyClosed", closeListener);
            __classPrivateFieldSet(this, _BrowserExtensionChannel_closed, true, "f");
            __classPrivateFieldGet(this, _BrowserExtensionChannel_closeListeners, "f").forEach((listener) => listener());
        };
        __classPrivateFieldGet(this, _BrowserExtensionChannel_options, "f").window.addEventListener("icrc94:unexpectedlyClosed", closeListener);
    }
    get closed() {
        return __classPrivateFieldGet(this, _BrowserExtensionChannel_closed, "f");
    }
    addEventListener(...[event, listener]) {
        switch (event) {
            case "close":
                __classPrivateFieldGet(this, _BrowserExtensionChannel_closeListeners, "f").add(listener);
                return () => {
                    __classPrivateFieldGet(this, _BrowserExtensionChannel_closeListeners, "f").delete(listener);
                };
            case "response":
                __classPrivateFieldGet(this, _BrowserExtensionChannel_responseListeners, "f").add(listener);
                return () => {
                    __classPrivateFieldGet(this, _BrowserExtensionChannel_responseListeners, "f").delete(listener);
                };
        }
    }
    async send(request) {
        if (__classPrivateFieldGet(this, _BrowserExtensionChannel_closed, "f")) {
            throw new BrowserExtensionTransportError("Communication channel is closed");
        }
        const response = await __classPrivateFieldGet(this, _BrowserExtensionChannel_options, "f").providerDetail.sendMessage(request);
        if (!isJsonRpcResponse(response)) {
            return;
        }
        __classPrivateFieldGet(this, _BrowserExtensionChannel_responseListeners, "f").forEach((listener) => listener(response));
    }
    async close() {
        if (__classPrivateFieldGet(this, _BrowserExtensionChannel_closed, "f")) {
            return;
        }
        __classPrivateFieldSet(this, _BrowserExtensionChannel_closed, true, "f");
        await __classPrivateFieldGet(this, _BrowserExtensionChannel_options, "f").providerDetail.dismiss();
        __classPrivateFieldGet(this, _BrowserExtensionChannel_closeListeners, "f").forEach((listener) => listener());
    }
}
_BrowserExtensionChannel_closeListeners = new WeakMap(), _BrowserExtensionChannel_responseListeners = new WeakMap(), _BrowserExtensionChannel_options = new WeakMap(), _BrowserExtensionChannel_closed = new WeakMap();
//# sourceMappingURL=browserExtensionChannel.js.map