import { type Transport } from "@slide-computer/signer";
import { BrowserExtensionChannel, type BrowserExtensionChannelOptions } from "./browserExtensionChannel";
import type { ProviderDetail } from "./types";
export declare class BrowserExtensionTransportError extends Error {
    constructor(message: string);
}
export interface BrowserExtensionTransportOptions extends BrowserExtensionChannelOptions {
}
export interface DiscoverBrowserExtensionOptions {
    /**
     * Time in milliseconds to wait for all browser extensions to send an icrc94:announceProvider event
     * @default 100
     */
    discoveryDuration?: number;
    /**
     * Relying party window, used to listen for incoming events
     * @default globalThis.window
     */
    window?: Window;
}
export interface EstablishBrowserExtensionTransportOptions extends DiscoverBrowserExtensionOptions, Omit<BrowserExtensionTransportOptions, "providerDetail"> {
    uuid: string;
}
export declare class BrowserExtensionTransport implements Transport {
    #private;
    constructor(options: BrowserExtensionTransportOptions);
    static discover({ discoveryDuration, window, }?: DiscoverBrowserExtensionOptions): Promise<ProviderDetail[]>;
    static findTransport(options: EstablishBrowserExtensionTransportOptions): Promise<BrowserExtensionTransport>;
    establishChannel(): Promise<BrowserExtensionChannel>;
}
