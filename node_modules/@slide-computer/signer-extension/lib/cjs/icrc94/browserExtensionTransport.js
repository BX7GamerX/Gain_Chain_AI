"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BrowserExtensionTransport_options;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserExtensionTransport = exports.BrowserExtensionTransportError = void 0;
const browserExtensionChannel_1 = require("./browserExtensionChannel");
class BrowserExtensionTransportError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, BrowserExtensionTransportError.prototype);
    }
}
exports.BrowserExtensionTransportError = BrowserExtensionTransportError;
class BrowserExtensionTransport {
    constructor(options) {
        _BrowserExtensionTransport_options.set(this, void 0);
        __classPrivateFieldSet(this, _BrowserExtensionTransport_options, Object.assign({ window: globalThis.window }, options), "f");
    }
    static async discover({ discoveryDuration = 100, window = globalThis.window, } = {}) {
        const providerDetails = [];
        window.addEventListener("icrc94:announceProvider", (event) => {
            if (providerDetails.find((providerDetail) => providerDetail.uuid === event.detail.uuid)) {
                // Avoid duplicates
                return;
            }
            providerDetails.push(event.detail);
        });
        window.dispatchEvent(new CustomEvent("icrc94:requestProvider"));
        await new Promise((resolve) => setTimeout(resolve, discoveryDuration));
        return providerDetails;
    }
    static async findTransport(options) {
        const providerDetails = await BrowserExtensionTransport.discover(options);
        const providerDetail = providerDetails.find(({ uuid }) => uuid === options.uuid);
        if (!providerDetail) {
            throw new BrowserExtensionTransportError("Browser extension couldn't be found, make sure it's installed and enabled for this page.");
        }
        return new BrowserExtensionTransport(Object.assign(Object.assign({}, options), { providerDetail }));
    }
    async establishChannel() {
        return new browserExtensionChannel_1.BrowserExtensionChannel(__classPrivateFieldGet(this, _BrowserExtensionTransport_options, "f"));
    }
}
exports.BrowserExtensionTransport = BrowserExtensionTransport;
_BrowserExtensionTransport_options = new WeakMap();
//# sourceMappingURL=browserExtensionTransport.js.map