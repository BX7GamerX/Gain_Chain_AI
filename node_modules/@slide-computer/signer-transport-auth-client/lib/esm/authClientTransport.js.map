{"version":3,"file":"authClientTransport.js","sourceRoot":"","sources":["../../src/authClientTransport.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAA+B,MAAM,sBAAsB,CAAC;AAC/E,OAAO,EAIN,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAE9D,MAAM,OAAO,wBAAyB,SAAQ,KAAK;IACjD,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,wBAAwB,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC;CACF;AAoBD,MAAM,OAAO,mBAAmB;IAM9B,YAAoB,UAAsB,EAAE,UAAsB;QAHzD,kDAAwB;QACxB,kDAAwB;QAG/B,MAAM,UAAU,GAAG,CAAC,uBAAA,EAAmB,uDAAwB,CAAC;QAChE,uBAAA,EAAmB,MAA2B,KAAK,mDAAA,CAAC;QACpD,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,IAAI,wBAAwB,CAChC,0CAA0C,CAC3C,CAAC;QACJ,CAAC;QACD,uBAAA,IAAI,mCAAe,UAAU,MAAA,CAAC;QAC9B,uBAAA,IAAI,mCAAe,UAAU,MAAA,CAAC;IAChC,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,uBAAA,IAAI,uCAAY,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,MAAM,CACjB,OAAmC;QAEnC,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAC5E,MAAM,UAAU,GAAG,IAAI,oBAAoB,CAAC;YAC1C,UAAU;YACV,sBAAsB,EAAE,OAAO,CAAC,sBAAsB;YACtD,sCAAsC,EACpC,OAAO,CAAC,sCAAsC;SACjD,CAAC,CAAC;QAEH,uBAAA,EAAmB,MAA2B,IAAI,mDAAA,CAAC;QACnD,OAAO,IAAI,EAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,IAAI,CAAC,uBAAA,IAAI,uCAAY,CAAC,SAAS,EAAE,CAAC;YAChC,MAAM,IAAI,wBAAwB,CAChC,sCAAsC,CACvC,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,iBAAiB,CAAC;YAC3B,UAAU,EAAE,uBAAA,IAAI,uCAAY;YAC5B,UAAU,EAAE,uBAAA,IAAI,uCAAY;SAC7B,CAAC,CAAC;IACL,CAAC;;;AA9CM,uDAAmC,KAAK,EAAjB,CAAkB","sourcesContent":["import { AuthClient, type AuthClientLoginOptions } from \"@dfinity/auth-client\";\nimport {\n  type Channel,\n  type Connection,\n  type Transport,\n} from \"@slide-computer/signer\";\nimport { AuthClientChannel } from \"./authClientChannel\";\nimport { AuthClientConnection } from \"./authClientConnection\";\n\nexport class AuthClientTransportError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, AuthClientTransportError.prototype);\n  }\n}\n\ntype AuthClientCreateOptions = Parameters<typeof AuthClient.create>[0];\n\nexport interface AuthClientTransportOptions {\n  /**\n   * Options used to create AuthClient instance\n   */\n  authClientCreateOptions?: AuthClientCreateOptions;\n  /**\n   * Options used to log in with AuthClient instance\n   */\n  authClientLoginOptions?: AuthClientLoginOptions;\n  /**\n   * Auth Client disconnect monitoring interval in ms\n   * @default 3000\n   */\n  authClientDisconnectMonitoringInterval?: number;\n}\n\nexport class AuthClientTransport implements Transport {\n  static #isInternalConstructing: boolean = false;\n\n  readonly #connection: Connection;\n  readonly #authClient: AuthClient;\n\n  private constructor(authClient: AuthClient, connection: Connection) {\n    const throwError = !AuthClientTransport.#isInternalConstructing;\n    AuthClientTransport.#isInternalConstructing = false;\n    if (throwError) {\n      throw new AuthClientTransportError(\n        \"AuthClientTransport is not constructable\",\n      );\n    }\n    this.#authClient = authClient;\n    this.#connection = connection;\n  }\n\n  get connection(): Connection {\n    return this.#connection;\n  }\n\n  static async create(\n    options: AuthClientTransportOptions,\n  ): Promise<AuthClientTransport> {\n    const authClient = await AuthClient.create(options.authClientCreateOptions);\n    const connection = new AuthClientConnection({\n      authClient,\n      authClientLoginOptions: options.authClientLoginOptions,\n      authClientDisconnectMonitoringInterval:\n        options.authClientDisconnectMonitoringInterval,\n    });\n\n    AuthClientTransport.#isInternalConstructing = true;\n    return new AuthClientTransport(authClient, connection);\n  }\n\n  async establishChannel(): Promise<Channel> {\n    if (!this.#connection.connected) {\n      throw new AuthClientTransportError(\n        \"AuthClientTransport is not connected\",\n      );\n    }\n    return new AuthClientChannel({\n      authClient: this.#authClient,\n      connection: this.#connection,\n    });\n  }\n}\n"]}