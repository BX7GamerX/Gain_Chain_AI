{"version":3,"file":"authClientChannel.js","sourceRoot":"","sources":["../../src/authClientChannel.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AuthClient } from \"@dfinity/auth-client\";\nimport {\n  type Channel,\n  type Connection,\n  type DelegationRequest,\n  fromBase64,\n  INVALID_REQUEST_ERROR,\n  isJsonRpcRequest,\n  type JsonRequest,\n  type JsonResponse,\n  NOT_SUPPORTED_ERROR,\n  toBase64,\n} from \"@slide-computer/signer\";\nimport { AuthClientTransportError } from \"./authClientTransport\";\nimport { scopes, supportedStandards } from \"./constants\";\nimport { DelegationChain, type DelegationIdentity } from \"@dfinity/identity\";\n\nexport interface AuthClientChannelOptions {\n  /**\n   * AuthClient instance from \"@dfinity/auth-client\"\n   */\n  authClient: AuthClient;\n  /**\n   * AuthClientTransport connection, used to close channel once connection is closed\n   */\n  connection: Connection;\n}\n\nexport class AuthClientChannel implements Channel {\n  #options: Required<AuthClientChannelOptions>;\n  #closed: boolean = false;\n  #closeListeners = new Set<() => void>();\n  #responseListeners = new Set<(response: JsonResponse) => void>();\n\n  constructor(options: AuthClientChannelOptions) {\n    this.#options = options;\n    this.#options.connection.addEventListener(\n      \"disconnect\",\n      () => (this.#closed = true),\n    );\n  }\n\n  get closed() {\n    return this.#closed || !this.#options.connection.connected;\n  }\n\n  addEventListener(\n    ...[event, listener]:\n      | [event: \"close\", listener: () => void]\n      | [event: \"response\", listener: (response: JsonResponse) => void]\n  ): () => void {\n    switch (event) {\n      case \"close\":\n        this.#closeListeners.add(listener);\n        return () => {\n          this.#closeListeners.delete(listener);\n        };\n      case \"response\":\n        this.#responseListeners.add(listener);\n        return () => {\n          this.#responseListeners.delete(listener);\n        };\n    }\n  }\n\n  async send(request: JsonRequest): Promise<void> {\n    if (this.closed) {\n      throw new AuthClientTransportError(\"Communication channel is closed\");\n    }\n\n    // Ignore one way messages\n    const id = request.id;\n    if (id === undefined) {\n      return;\n    }\n\n    // Create response and call listeners\n    const response = await this.#createResponse({ id, ...request });\n    this.#responseListeners.forEach((listener) => listener(response));\n  }\n\n  async close(): Promise<void> {\n    this.#closed = true;\n    this.#closeListeners.forEach((listener) => listener());\n  }\n\n  async #createResponse(\n    request: JsonRequest & { id: NonNullable<JsonRequest[\"id\"]> },\n  ): Promise<JsonResponse> {\n    const id = request.id;\n\n    if (!isJsonRpcRequest(request)) {\n      return {\n        id,\n        jsonrpc: \"2.0\",\n        error: { code: INVALID_REQUEST_ERROR, message: \"Invalid request\" },\n      };\n    }\n\n    switch (request.method) {\n      case \"icrc25_supported_standards\":\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: { supportedStandards },\n        };\n      case \"icrc25_permissions\":\n      case \"icrc25_request_permissions\":\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: { scopes },\n        };\n      case \"icrc34_delegation\":\n        // As per the ICRC-34 spec, II only returns unscoped Relying Party delegations (without targets).\n        const delegationRequest = request as DelegationRequest;\n        if (!delegationRequest.params) {\n          throw new AuthClientTransportError(\n            \"Required params missing in request\",\n          );\n        }\n        const identity =\n          this.#options.authClient.getIdentity() as DelegationIdentity;\n        const publicKey = fromBase64(delegationRequest.params.publicKey);\n        const expiration = delegationRequest.params.maxTimeToLive\n          ? new Date(\n              Date.now() +\n                Number(\n                  BigInt(delegationRequest.params.maxTimeToLive) /\n                    BigInt(1_000_000),\n                ),\n            )\n          : undefined;\n        const delegation = await DelegationChain.create(\n          identity,\n          { toDer: () => publicKey },\n          expiration,\n          {\n            previous: identity.getDelegation(),\n          },\n        );\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          result: {\n            publicKey: toBase64(delegation.publicKey),\n            signerDelegation: delegation.delegations.map(\n              ({ delegation, signature }) => ({\n                delegation: {\n                  pubkey: toBase64(delegation.pubkey),\n                  expiration: delegation.expiration.toString(),\n                  ...(delegation.targets\n                    ? {\n                        targets: delegation.targets.map((target) =>\n                          target.toText(),\n                        ),\n                      }\n                    : {}),\n                },\n                signature: toBase64(signature),\n              }),\n            ),\n          },\n        };\n      default:\n        return {\n          id,\n          jsonrpc: \"2.0\",\n          error: { code: NOT_SUPPORTED_ERROR, message: \"Not supported\" },\n        };\n    }\n  }\n}\n"]}