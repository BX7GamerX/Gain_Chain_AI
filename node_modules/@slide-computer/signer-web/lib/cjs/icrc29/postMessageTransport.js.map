{"version":3,"file":"postMessageTransport.js","sourceRoot":"","sources":["../../../src/icrc29/postMessageTransport.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,6DAA0D;AAC1D,oCAA8C;AAC9C,2CAAwC;AAExC,MAAM,4BAA4B,GAChC,qIAAqI,CAAC;AAExI,MAAa,yBAA0B,SAAQ,KAAK;IAClD,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC;CACF;AALD,8DAKC;AAsDD,0FAA0F;AAC1F,IAAI,WAAW,GAAG,KAAK,CAAC;AACxB,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;IACtB,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IAC9E,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC;AAC3E,CAAC;AAED,MAAa,oBAAoB;IAG/B,YAAY,OAAoC;QAFvC,gDAAgD;QAGvD,IAAI,CAAC,IAAA,0BAAkB,EAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,yBAAyB,CAAC,wBAAwB,CAAC,CAAC;QAChE,CAAC;QAED,uBAAA,IAAI,iDACF,oBAAoB,EAAE,EAAE,EACxB,MAAM,EAAE,UAAU,CAAC,MAAM,EACzB,gBAAgB,EAAE,KAAK,EACvB,iBAAiB,EAAE,IAAI,EACvB,iBAAiB,EAAE,GAAG,EACtB,MAAM,EAAE,UAAU,CAAC,MAAM,EACzB,WAAW,EAAE,IAAI,EACjB,uBAAuB,EAAE,IAAI,EAC7B,2BAA2B,EAAE,IAAI,IAC9B,OAAO,OACX,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,IAAI,uBAAA,IAAI,qCAAS,CAAC,2BAA2B,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9D,MAAM,IAAI,yBAAyB,CACjC,qEAAqE,4BAA4B,EAAE,CACpG,CAAC;QACJ,CAAC;QACD,MAAM,YAAY,GAAG,uBAAA,IAAI,qCAAS,CAAC,MAAM,CAAC,IAAI,CAC5C,uBAAA,IAAI,qCAAS,CAAC,GAAG,EACjB,cAAc,EACd,uBAAA,IAAI,qCAAS,CAAC,oBAAoB,CACnC,CAAC;QACF,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,yBAAyB,CAAC,mCAAmC,CAAC,CAAC;QAC3E,CAAC;QAED,OAAO,IAAI,OAAO,CAAqB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACzD,IAAI,OAA2B,CAAC;YAChC,IAAI,qBAAS,iCACR,uBAAA,IAAI,qCAAS,KAChB,YAAY,EACZ,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE;oBACtB,OAAO,GAAG,IAAI,uCAAkB,iCAC3B,uBAAA,IAAI,qCAAS,KAChB,YAAY,EAAE,MAAM,EACpB,YAAY,EAAE,YAAY,IAC1B,CAAC;oBACH,OAAO,CAAC,OAAO,CAAC,CAAC;gBACnB,CAAC,EACD,kBAAkB,EAAE,GAAG,EAAE;oBACvB,IAAI,uBAAA,IAAI,qCAAS,CAAC,uBAAuB,EAAE,CAAC;wBAC1C,YAAY,CAAC,KAAK,EAAE,CAAC;oBACvB,CAAC;oBACD,MAAM,CACJ,IAAI,yBAAyB,CAC3B,yEAAyE,CAC1E,CACF,CAAC;gBACJ,CAAC,EACD,YAAY,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,IACnC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAhED,oDAgEC","sourcesContent":["import { type Transport } from \"@slide-computer/signer\";\nimport { PostMessageChannel } from \"./postMessageChannel\";\nimport { urlIsSecureContext } from \"../utils\";\nimport { Heartbeat } from \"./heartbeat\";\n\nconst NON_CLICK_ESTABLISHMENT_LINK =\n  \"https://github.com/slide-computer/signer-js/blob/main/packages/signer-web/README.md#channels-must-be-established-in-a-click-handler\";\n\nexport class PostMessageTransportError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, PostMessageTransportError.prototype);\n  }\n}\n\nexport interface PostMessageTransportOptions {\n  /**\n   * Signer RPC url to send and receive messages from\n   */\n  url: string;\n  /**\n   * Signer window feature config string\n   * @example \"toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100\"\n   */\n  windowOpenerFeatures?: string;\n  /**\n   * Relying party window, used to listen for incoming message events\n   * @default globalThis.window\n   */\n  window?: Window;\n  /**\n   * Reasonable time in milliseconds in which the communication channel needs to be established\n   * @default 10000\n   */\n  establishTimeout?: number;\n  /**\n   * Time in milliseconds of not receiving heartbeat responses after which the communication channel is disconnected\n   * @default 2000\n   */\n  disconnectTimeout?: number;\n  /**\n   * Status polling rate in ms\n   * @default 300\n   */\n  statusPollingRate?: number;\n  /**\n   * Get random uuid implementation for status messages\n   * @default globalThis.crypto\n   */\n  crypto?: Pick<Crypto, \"randomUUID\">;\n  /**\n   * Manage focus between relying party and signer window\n   * @default true\n   */\n  manageFocus?: boolean;\n  /**\n   * Close signer window on communication channel establish timeout\n   * @default true\n   */\n  closeOnEstablishTimeout?: boolean;\n  /**\n   * Detect attempts to establish channel outside of click handler\n   * @default true\n   */\n  detectNonClickEstablishment?: boolean;\n}\n\n// Boolean that tracks click events to check if the popup is opened within a click context\nlet withinClick = false;\nif (globalThis.window) {\n  globalThis.window.addEventListener(\"click\", () => (withinClick = true), true);\n  globalThis.window.addEventListener(\"click\", () => (withinClick = false));\n}\n\nexport class PostMessageTransport implements Transport {\n  readonly #options: Required<PostMessageTransportOptions>;\n\n  constructor(options: PostMessageTransportOptions) {\n    if (!urlIsSecureContext(options.url)) {\n      throw new PostMessageTransportError(\"Invalid signer RPC url\");\n    }\n\n    this.#options = {\n      windowOpenerFeatures: \"\",\n      window: globalThis.window,\n      establishTimeout: 10000,\n      disconnectTimeout: 2000,\n      statusPollingRate: 300,\n      crypto: globalThis.crypto,\n      manageFocus: true,\n      closeOnEstablishTimeout: true,\n      detectNonClickEstablishment: true,\n      ...options,\n    };\n  }\n\n  async establishChannel(): Promise<PostMessageChannel> {\n    if (this.#options.detectNonClickEstablishment && !withinClick) {\n      throw new PostMessageTransportError(\n        `Signer window should not be opened outside of click handler, see: ${NON_CLICK_ESTABLISHMENT_LINK}`,\n      );\n    }\n    const signerWindow = this.#options.window.open(\n      this.#options.url,\n      \"signerWindow\",\n      this.#options.windowOpenerFeatures,\n    );\n    if (!signerWindow) {\n      throw new PostMessageTransportError(\"Signer window could not be opened\");\n    }\n\n    return new Promise<PostMessageChannel>((resolve, reject) => {\n      let channel: PostMessageChannel;\n      new Heartbeat({\n        ...this.#options,\n        signerWindow,\n        onEstablish: (origin) => {\n          channel = new PostMessageChannel({\n            ...this.#options,\n            signerOrigin: origin,\n            signerWindow: signerWindow,\n          });\n          resolve(channel);\n        },\n        onEstablishTimeout: () => {\n          if (this.#options.closeOnEstablishTimeout) {\n            signerWindow.close();\n          }\n          reject(\n            new PostMessageTransportError(\n              \"Communication channel could not be established within a reasonable time\",\n            ),\n          );\n        },\n        onDisconnect: () => channel.close(),\n      });\n    });\n  }\n}\n"]}