{"version":3,"file":"heartbeat.js","sourceRoot":"","sources":["../../../src/icrc29/heartbeat.ts"],"names":[],"mappings":"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","sourcesContent":["import { isJsonRpcResponse, type JsonResponse } from \"@slide-computer/signer\";\n\nexport interface HeartbeatOptions {\n  /**\n   * Signer window to send and receive heartbeat messages from\n   */\n  signerWindow: Window;\n  /**\n   * Callback when first heartbeat has been received\n   */\n  onEstablish: (origin: string) => void;\n  /**\n   * Reasonable time in milliseconds in which the communication channel needs to be established\n   * @default 10000\n   */\n  establishTimeout?: number;\n  /**\n   * Callback when no heartbeats have been received for {@link establishTimeout} milliseconds\n   */\n  onEstablishTimeout: () => void;\n  /**\n   * Time in milliseconds of not receiving heartbeat responses after which the communication channel is disconnected\n   * @default 2000\n   */\n  disconnectTimeout?: number;\n  /**\n   * Callback when no heartbeats have been received for {@link disconnectTimeout} milliseconds\n   */\n  onDisconnect: () => void;\n  /**\n   * Status polling rate in ms\n   * @default 300\n   */\n  statusPollingRate?: number;\n  /**\n   * Relying party window, used to listen for incoming message events\n   * @default globalThis.window\n   */\n  window?: Window;\n  /**\n   * Get random uuid implementation for status messages\n   * @default globalThis.crypto\n   */\n  crypto?: Pick<Crypto, \"randomUUID\">;\n}\n\nexport class Heartbeat {\n  readonly #options: Required<HeartbeatOptions>;\n\n  constructor(options: HeartbeatOptions) {\n    this.#options = {\n      establishTimeout: 10000,\n      disconnectTimeout: 2000,\n      statusPollingRate: 300,\n      window: globalThis.window,\n      crypto: globalThis.crypto,\n      ...options,\n    };\n\n    this.#establish();\n  }\n\n  #establish(): void {\n    const timeout = setTimeout(() => {\n      listener();\n      clearInterval(interval);\n\n      this.#options.onEstablishTimeout();\n    }, this.#options.establishTimeout);\n\n    const listener = this.#receiveReadyResponse((response) => {\n      listener();\n      clearInterval(interval);\n      clearTimeout(timeout);\n\n      this.#options.onEstablish(response.origin);\n      this.#maintain(response.origin);\n    });\n\n    const interval = setInterval(\n      () => this.#sendStatusMessage(this.#options.crypto.randomUUID()),\n      this.#options.statusPollingRate,\n    );\n  }\n\n  #maintain(origin: string): void {\n    let timeout: ReturnType<typeof setTimeout>;\n    let id: string;\n\n    const listener = this.#receiveReadyResponse((response) => {\n      if (id && response.data.id === id && response.origin === origin) {\n        clearTimeout(timeout);\n        setTimeout(poll, this.#options.statusPollingRate);\n      }\n    });\n\n    const poll = () => {\n      id = this.#options.crypto.randomUUID();\n      timeout = setTimeout(() => {\n        listener();\n        this.#options.onDisconnect();\n      }, this.#options.disconnectTimeout);\n\n      this.#sendStatusMessage(id);\n    };\n\n    setTimeout(poll, this.#options.statusPollingRate);\n  }\n\n  #receiveReadyResponse(\n    handler: (event: MessageEvent<JsonResponse<\"ready\">>) => void,\n  ): () => void {\n    const listener = (event: MessageEvent) => {\n      if (\n        event.source === this.#options.signerWindow &&\n        isJsonRpcResponse(event.data) &&\n        \"result\" in event.data &&\n        event.data.result === \"ready\"\n      ) {\n        handler(event);\n      }\n    };\n    this.#options.window.addEventListener(\"message\", listener);\n    return () => this.#options.window.removeEventListener(\"message\", listener);\n  }\n\n  #sendStatusMessage(id: string): void {\n    this.#options.signerWindow.postMessage(\n      { jsonrpc: \"2.0\", id, method: \"icrc29_status\" },\n      \"*\",\n    );\n  }\n}\n"]}