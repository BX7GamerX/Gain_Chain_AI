var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Heartbeat_instances, _Heartbeat_options, _Heartbeat_establish, _Heartbeat_maintain, _Heartbeat_receiveReadyResponse, _Heartbeat_sendStatusMessage;
import { isJsonRpcResponse } from "@slide-computer/signer";
export class Heartbeat {
    constructor(options) {
        _Heartbeat_instances.add(this);
        _Heartbeat_options.set(this, void 0);
        __classPrivateFieldSet(this, _Heartbeat_options, Object.assign({ establishTimeout: 10000, disconnectTimeout: 2000, statusPollingRate: 300, window: globalThis.window, crypto: globalThis.crypto }, options), "f");
        __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_establish).call(this);
    }
}
_Heartbeat_options = new WeakMap(), _Heartbeat_instances = new WeakSet(), _Heartbeat_establish = function _Heartbeat_establish() {
    const timeout = setTimeout(() => {
        listener();
        clearInterval(interval);
        __classPrivateFieldGet(this, _Heartbeat_options, "f").onEstablishTimeout();
    }, __classPrivateFieldGet(this, _Heartbeat_options, "f").establishTimeout);
    const listener = __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_receiveReadyResponse).call(this, (response) => {
        listener();
        clearInterval(interval);
        clearTimeout(timeout);
        __classPrivateFieldGet(this, _Heartbeat_options, "f").onEstablish(response.origin);
        __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_maintain).call(this, response.origin);
    });
    const interval = setInterval(() => __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_sendStatusMessage).call(this, __classPrivateFieldGet(this, _Heartbeat_options, "f").crypto.randomUUID()), __classPrivateFieldGet(this, _Heartbeat_options, "f").statusPollingRate);
}, _Heartbeat_maintain = function _Heartbeat_maintain(origin) {
    let timeout;
    let id;
    const listener = __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_receiveReadyResponse).call(this, (response) => {
        if (id && response.data.id === id && response.origin === origin) {
            clearTimeout(timeout);
            setTimeout(poll, __classPrivateFieldGet(this, _Heartbeat_options, "f").statusPollingRate);
        }
    });
    const poll = () => {
        id = __classPrivateFieldGet(this, _Heartbeat_options, "f").crypto.randomUUID();
        timeout = setTimeout(() => {
            listener();
            __classPrivateFieldGet(this, _Heartbeat_options, "f").onDisconnect();
        }, __classPrivateFieldGet(this, _Heartbeat_options, "f").disconnectTimeout);
        __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_sendStatusMessage).call(this, id);
    };
    setTimeout(poll, __classPrivateFieldGet(this, _Heartbeat_options, "f").statusPollingRate);
}, _Heartbeat_receiveReadyResponse = function _Heartbeat_receiveReadyResponse(handler) {
    const listener = (event) => {
        if (event.source === __classPrivateFieldGet(this, _Heartbeat_options, "f").signerWindow &&
            isJsonRpcResponse(event.data) &&
            "result" in event.data &&
            event.data.result === "ready") {
            handler(event);
        }
    };
    __classPrivateFieldGet(this, _Heartbeat_options, "f").window.addEventListener("message", listener);
    return () => __classPrivateFieldGet(this, _Heartbeat_options, "f").window.removeEventListener("message", listener);
}, _Heartbeat_sendStatusMessage = function _Heartbeat_sendStatusMessage(id) {
    __classPrivateFieldGet(this, _Heartbeat_options, "f").signerWindow.postMessage({ jsonrpc: "2.0", id, method: "icrc29_status" }, "*");
};
//# sourceMappingURL=heartbeat.js.map