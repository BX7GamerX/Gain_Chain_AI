{"version":3,"file":"postMessageChannel.js","sourceRoot":"","sources":["../../../src/icrc29/postMessageChannel.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAEL,iBAAiB,GAGlB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,yBAAyB,EAAE,MAAM,wBAAwB,CAAC;AAuBnE,MAAM,OAAO,kBAAkB;IAK7B,YAAY,OAAkC;QAJrC,6CAAkB,IAAI,GAAG,EAAc,EAAC;QACxC,8CAA8C;QACvD,qCAAU,KAAK,EAAC;QAGd,uBAAA,IAAI,+CACF,MAAM,EAAE,UAAU,CAAC,MAAM,EACzB,WAAW,EAAE,IAAI,IACd,OAAO,OACX,CAAC;IACJ,CAAC;IAED,IAAI,MAAM;QACR,OAAO,uBAAA,IAAI,kCAAQ,CAAC;IACtB,CAAC;IAED,gBAAgB,CACd,GAAG,CAAC,KAAK,EAAE,QAAQ,CAEgD;QAEnE,QAAQ,KAAK,EAAE,CAAC;YACd,KAAK,OAAO;gBACV,uBAAA,IAAI,0CAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACnC,OAAO,GAAG,EAAE;oBACV,uBAAA,IAAI,0CAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACxC,CAAC,CAAC;YACJ,KAAK,UAAU;gBACb,MAAM,eAAe,GAAG,KAAK,EAAE,KAAmB,EAAE,EAAE;oBACpD,IACE,KAAK,CAAC,MAAM,KAAK,uBAAA,IAAI,mCAAS,CAAC,YAAY;wBAC3C,KAAK,CAAC,MAAM,KAAK,uBAAA,IAAI,mCAAS,CAAC,YAAY;wBAC3C,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,EAC9B,CAAC;wBACD,OAAO;oBACT,CAAC;oBACD,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACvB,CAAC,CAAC;gBACF,uBAAA,IAAI,mCAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;gBAClE,OAAO,GAAG,EAAE;oBACV,uBAAA,IAAI,mCAAS,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;gBACvE,CAAC,CAAC;QACN,CAAC;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAoB;QAC7B,IAAI,uBAAA,IAAI,kCAAQ,EAAE,CAAC;YACjB,MAAM,IAAI,yBAAyB,CAAC,iCAAiC,CAAC,CAAC;QACzE,CAAC;QAED,uBAAA,IAAI,mCAAS,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,EAAE,uBAAA,IAAI,mCAAS,CAAC,YAAY,CAAC,CAAC;QAE5E,IAAI,uBAAA,IAAI,mCAAS,CAAC,WAAW,EAAE,CAAC;YAC9B,uBAAA,IAAI,mCAAS,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QACrC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,uBAAA,IAAI,kCAAQ,EAAE,CAAC;YACjB,OAAO;QACT,CAAC;QAED,uBAAA,IAAI,8BAAW,IAAI,MAAA,CAAC;QAEpB,uBAAA,IAAI,mCAAS,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,uBAAA,IAAI,mCAAS,CAAC,WAAW,EAAE,CAAC;YAC9B,uBAAA,IAAI,mCAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC/B,CAAC;QAED,uBAAA,IAAI,0CAAgB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzD,CAAC;CACF","sourcesContent":["import {\n  type Channel,\n  isJsonRpcResponse,\n  type JsonRequest,\n  type JsonResponse,\n} from \"@slide-computer/signer\";\nimport { PostMessageTransportError } from \"./postMessageTransport\";\n\nexport interface PostMessageChannelOptions {\n  /**\n   * Signer window with which a communication channel has been established\n   */\n  signerWindow: Window;\n  /**\n   * Signer origin obtained when communication channel was established\n   */\n  signerOrigin: string;\n  /**\n   * Relying party window, used to listen for incoming message events\n   * @default globalThis.window\n   */\n  window?: Window;\n  /**\n   * Manage focus between relying party and signer window\n   * @default true\n   */\n  manageFocus?: boolean;\n}\n\nexport class PostMessageChannel implements Channel {\n  readonly #closeListeners = new Set<() => void>();\n  readonly #options: Required<PostMessageChannelOptions>;\n  #closed = false;\n\n  constructor(options: PostMessageChannelOptions) {\n    this.#options = {\n      window: globalThis.window,\n      manageFocus: true,\n      ...options,\n    };\n  }\n\n  get closed() {\n    return this.#closed;\n  }\n\n  addEventListener(\n    ...[event, listener]:\n      | [event: \"close\", listener: () => void]\n      | [event: \"response\", listener: (response: JsonResponse) => void]\n  ): () => void {\n    switch (event) {\n      case \"close\":\n        this.#closeListeners.add(listener);\n        return () => {\n          this.#closeListeners.delete(listener);\n        };\n      case \"response\":\n        const messageListener = async (event: MessageEvent) => {\n          if (\n            event.source !== this.#options.signerWindow ||\n            event.origin !== this.#options.signerOrigin ||\n            !isJsonRpcResponse(event.data)\n          ) {\n            return;\n          }\n          listener(event.data);\n        };\n        this.#options.window.addEventListener(\"message\", messageListener);\n        return () => {\n          this.#options.window.removeEventListener(\"message\", messageListener);\n        };\n    }\n  }\n\n  async send(request: JsonRequest): Promise<void> {\n    if (this.#closed) {\n      throw new PostMessageTransportError(\"Communication channel is closed\");\n    }\n\n    this.#options.signerWindow.postMessage(request, this.#options.signerOrigin);\n\n    if (this.#options.manageFocus) {\n      this.#options.signerWindow.focus();\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.#closed) {\n      return;\n    }\n\n    this.#closed = true;\n\n    this.#options.signerWindow.close();\n    if (this.#options.manageFocus) {\n      this.#options.window.focus();\n    }\n\n    this.#closeListeners.forEach((listener) => listener());\n  }\n}\n"]}