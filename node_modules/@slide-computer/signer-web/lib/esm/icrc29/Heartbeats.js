var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Heartbeat_instances, _Heartbeat_options, _Heartbeat_heartbeatInterval, _Heartbeat_readyTimeout, _Heartbeat_waitForReadyResponse, _Heartbeat_onReadyResponse, _Heartbeat_onReadyTimeout, _Heartbeat_sendStatusMessage;
import { isJsonRpcResponse } from "@slide-computer/signer";
export class Heartbeat {
    constructor(options) {
        _Heartbeat_instances.add(this);
        _Heartbeat_options.set(this, void 0);
        _Heartbeat_heartbeatInterval.set(this, void 0);
        _Heartbeat_readyTimeout.set(this, void 0);
        __classPrivateFieldSet(this, _Heartbeat_options, Object.assign({ window: globalThis.window, crypto: globalThis.crypto }, options), "f");
        __classPrivateFieldSet(this, _Heartbeat_readyTimeout, setTimeout(__classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_onReadyTimeout), __classPrivateFieldGet(this, _Heartbeat_options, "f").readyTimeout), "f");
        __classPrivateFieldSet(this, _Heartbeat_heartbeatInterval, setInterval(() => {
            const id = crypto.randomUUID();
            __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_waitForReadyResponse).call(this, id).then(__classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_onReadyResponse));
            __classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_sendStatusMessage).call(this, id);
        }, __classPrivateFieldGet(this, _Heartbeat_options, "f").pollingRate), "f");
    }
    set readyTimeout(value) {
        __classPrivateFieldGet(this, _Heartbeat_options, "f").readyTimeout = value;
    }
}
_Heartbeat_options = new WeakMap(), _Heartbeat_heartbeatInterval = new WeakMap(), _Heartbeat_readyTimeout = new WeakMap(), _Heartbeat_instances = new WeakSet(), _Heartbeat_waitForReadyResponse = function _Heartbeat_waitForReadyResponse(id) {
    return new Promise((resolve) => {
        const listener = (event) => {
            if ((event.source === __classPrivateFieldGet(this, _Heartbeat_options, "f").signerWindow &&
                isJsonRpcResponse(event.data) &&
                event.data.id === id) ||
                ("result" in event.data && event.data.result === "ready")) {
                __classPrivateFieldGet(this, _Heartbeat_options, "f").window.removeEventListener("message", listener);
                resolve(event.origin);
            }
        };
        __classPrivateFieldGet(this, _Heartbeat_options, "f").window.addEventListener("message", listener);
    });
}, _Heartbeat_onReadyResponse = function _Heartbeat_onReadyResponse(origin) {
    clearTimeout(__classPrivateFieldGet(this, _Heartbeat_readyTimeout, "f"));
    __classPrivateFieldSet(this, _Heartbeat_readyTimeout, setTimeout(__classPrivateFieldGet(this, _Heartbeat_instances, "m", _Heartbeat_onReadyTimeout), __classPrivateFieldGet(this, _Heartbeat_options, "f").readyTimeout), "f");
    __classPrivateFieldGet(this, _Heartbeat_options, "f").onReadyResponse(origin);
}, _Heartbeat_onReadyTimeout = function _Heartbeat_onReadyTimeout() {
    clearInterval(__classPrivateFieldGet(this, _Heartbeat_heartbeatInterval, "f"));
    __classPrivateFieldGet(this, _Heartbeat_options, "f").onReadyTimeout();
}, _Heartbeat_sendStatusMessage = function _Heartbeat_sendStatusMessage(id) {
    __classPrivateFieldGet(this, _Heartbeat_options, "f").signerWindow.postMessage({ jsonrpc: "2.0", id, method: "icrc29_status" }, "*");
};
//# sourceMappingURL=heartbeats.js.map