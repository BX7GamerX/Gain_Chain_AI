var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlugChannel_closeListeners, _PlugChannel_responseListeners;
import {} from "@slide-computer/signer";
import { PlugTransportError } from "./plugTransport";
export class PlugChannel {
    constructor() {
        _PlugChannel_closeListeners.set(this, new Set());
        _PlugChannel_responseListeners.set(this, new Set());
    }
    get closed() {
        return (!("ic" in window) ||
            typeof window.ic !== "object" ||
            !window.ic ||
            !("plug" in window.ic) ||
            typeof window.ic.plug !== "object" ||
            !window.ic.plug ||
            !("request" in window.ic.plug) ||
            typeof window.ic.plug.request !== "function");
    }
    addEventListener(...[event, listener]) {
        switch (event) {
            case "close":
                __classPrivateFieldGet(this, _PlugChannel_closeListeners, "f").add(listener);
                return () => {
                    __classPrivateFieldGet(this, _PlugChannel_closeListeners, "f").delete(listener);
                };
            case "response":
                __classPrivateFieldGet(this, _PlugChannel_responseListeners, "f").add(listener);
                return () => {
                    __classPrivateFieldGet(this, _PlugChannel_responseListeners, "f").delete(listener);
                };
        }
    }
    async send(request) {
        if (this.closed) {
            throw new PlugTransportError("Plug wallet cannot be found");
        }
        // @ts-ignore Call plug window method
        const response = await window.ic.plug.request(request);
        // One way messages, don't have a response
        if (request.id === undefined)
            return;
        // Call listeners with response
        __classPrivateFieldGet(this, _PlugChannel_responseListeners, "f").forEach((listener) => listener(response));
    }
    async close() { }
}
_PlugChannel_closeListeners = new WeakMap(), _PlugChannel_responseListeners = new WeakMap();
//# sourceMappingURL=plugChannel.js.map