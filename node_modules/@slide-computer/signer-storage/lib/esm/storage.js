import { createStore, del, get, set } from "idb-keyval";
/**
 * Legacy implementation of SignerStorage, for use where IndexedDb is not available
 */
export class LocalStorage {
    constructor(prefix = "signer-", _localStorage) {
        this.prefix = prefix;
        this._localStorage = _localStorage;
    }
    async get(key) {
        var _a;
        return (_a = this._getLocalStorage().getItem(this.prefix + key)) !== null && _a !== void 0 ? _a : undefined;
    }
    async set(key, value) {
        if (typeof value !== "string") {
            throw Error("Use IdbStorage to store a `ECDSAKeyIdentity`.");
        }
        this._getLocalStorage().setItem(this.prefix + key, value);
    }
    async remove(key) {
        this._getLocalStorage().removeItem(this.prefix + key);
    }
    _getLocalStorage() {
        if (this._localStorage) {
            return this._localStorage;
        }
        const ls = typeof window === "undefined"
            ? // @ts-ignore
                typeof global === "undefined"
                    ? typeof self === "undefined"
                        ? undefined
                        : self.localStorage
                    : // @ts-ignore
                        global.localStorage
            : window.localStorage;
        if (!ls) {
            throw new Error("Could not find local storage.");
        }
        return ls;
    }
}
/**
 * IdbStorage is an interface for simple storage of string key-value pairs built on idb-keyval
 *
 * It replaces {@link LocalStorage}
 * @see implements {@link SignerStorage}
 */
export class IdbStorage {
    get store() {
        if (!this._store) {
            this._store = createStore("signer-db", "signer-store");
        }
        return this._store;
    }
    async get(key) {
        return get(key, this.store);
    }
    async set(key, value) {
        return set(key, value, this.store);
    }
    async remove(key) {
        return del(key, this.store);
    }
}
//# sourceMappingURL=storage.js.map