{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../src/storage.ts"],"names":[],"mappings":";;;AAAA,2CAAuE;AAevE;;GAEG;AACH,MAAa,YAAY;IACvB,YACkB,SAAS,SAAS,EACjB,aAAuB;QADxB,WAAM,GAAN,MAAM,CAAY;QACjB,kBAAa,GAAb,aAAa,CAAU;IACvC,CAAC;IAEG,KAAK,CAAC,GAAG,CAAC,GAAW;;QAC1B,OAAO,MAAA,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,mCAAI,SAAS,CAAC;IACzE,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAgB;QAC5C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,MAAM,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAC/D,CAAC;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAW;QAC7B,IAAI,CAAC,gBAAgB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;IACxD,CAAC;IAEO,gBAAgB;QACtB,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;QAED,MAAM,EAAE,GACN,OAAO,MAAM,KAAK,WAAW;YAC3B,CAAC,CAAC,aAAa;gBACb,OAAO,MAAM,KAAK,WAAW;oBAC7B,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW;wBAC3B,CAAC,CAAC,SAAS;wBACX,CAAC,CAAC,IAAI,CAAC,YAAY;oBACrB,CAAC,CAAC,aAAa;wBACb,MAAM,CAAC,YAAY;YACvB,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;QAE1B,IAAI,CAAC,EAAE,EAAE,CAAC;YACR,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AA3CD,oCA2CC;AAED;;;;;GAKG;AACH,MAAa,UAAU;IAGrB,IAAI,KAAK;QACP,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,GAAG,IAAA,wBAAW,EAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACzD,CAAC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW;QAC1B,OAAO,IAAA,gBAAG,EAAY,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAgB;QAC5C,OAAO,IAAA,gBAAG,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAW;QAC7B,OAAO,IAAA,gBAAG,EAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;CACF;AArBD,gCAqBC","sourcesContent":["import { createStore, del, get, set, type UseStore } from \"idb-keyval\";\n\nexport type StoredKey = string | CryptoKeyPair;\n\n/**\n * Interface for persisting user identity and delegation data\n */\nexport interface SignerStorage {\n  get(key: string): Promise<StoredKey | undefined>;\n\n  set(key: string, value: StoredKey): Promise<void>;\n\n  remove(key: string): Promise<void>;\n}\n\n/**\n * Legacy implementation of SignerStorage, for use where IndexedDb is not available\n */\nexport class LocalStorage implements SignerStorage {\n  constructor(\n    public readonly prefix = \"signer-\",\n    private readonly _localStorage?: Storage,\n  ) {}\n\n  public async get(key: string) {\n    return this._getLocalStorage().getItem(this.prefix + key) ?? undefined;\n  }\n\n  public async set(key: string, value: StoredKey) {\n    if (typeof value !== \"string\") {\n      throw Error(\"Use IdbStorage to store a `ECDSAKeyIdentity`.\");\n    }\n    this._getLocalStorage().setItem(this.prefix + key, value);\n  }\n\n  public async remove(key: string) {\n    this._getLocalStorage().removeItem(this.prefix + key);\n  }\n\n  private _getLocalStorage(): Storage {\n    if (this._localStorage) {\n      return this._localStorage;\n    }\n\n    const ls =\n      typeof window === \"undefined\"\n        ? // @ts-ignore\n          typeof global === \"undefined\"\n          ? typeof self === \"undefined\"\n            ? undefined\n            : self.localStorage\n          : // @ts-ignore\n            global.localStorage\n        : window.localStorage;\n\n    if (!ls) {\n      throw new Error(\"Could not find local storage.\");\n    }\n\n    return ls;\n  }\n}\n\n/**\n * IdbStorage is an interface for simple storage of string key-value pairs built on idb-keyval\n *\n * It replaces {@link LocalStorage}\n * @see implements {@link SignerStorage}\n */\nexport class IdbStorage implements SignerStorage {\n  private _store?: UseStore;\n\n  get store() {\n    if (!this._store) {\n      this._store = createStore(\"signer-db\", \"signer-store\");\n    }\n    return this._store;\n  }\n\n  public async get(key: string) {\n    return get<StoredKey>(key, this.store);\n  }\n\n  public async set(key: string, value: StoredKey) {\n    return set(key, value, this.store);\n  }\n\n  public async remove(key: string) {\n    return del(key, this.store);\n  }\n}\n"]}