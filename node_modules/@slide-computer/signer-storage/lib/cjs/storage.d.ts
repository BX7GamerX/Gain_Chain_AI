import { type UseStore } from "idb-keyval";
export type StoredKey = string | CryptoKeyPair;
/**
 * Interface for persisting user identity and delegation data
 */
export interface SignerStorage {
    get(key: string): Promise<StoredKey | undefined>;
    set(key: string, value: StoredKey): Promise<void>;
    remove(key: string): Promise<void>;
}
/**
 * Legacy implementation of SignerStorage, for use where IndexedDb is not available
 */
export declare class LocalStorage implements SignerStorage {
    readonly prefix: string;
    private readonly _localStorage?;
    constructor(prefix?: string, _localStorage?: Storage | undefined);
    get(key: string): Promise<string | undefined>;
    set(key: string, value: StoredKey): Promise<void>;
    remove(key: string): Promise<void>;
    private _getLocalStorage;
}
/**
 * IdbStorage is an interface for simple storage of string key-value pairs built on idb-keyval
 *
 * It replaces {@link LocalStorage}
 * @see implements {@link SignerStorage}
 */
export declare class IdbStorage implements SignerStorage {
    private _store?;
    get store(): UseStore;
    get(key: string): Promise<StoredKey | undefined>;
    set(key: string, value: StoredKey): Promise<void>;
    remove(key: string): Promise<void>;
}
