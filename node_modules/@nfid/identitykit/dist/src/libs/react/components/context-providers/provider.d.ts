import { PropsWithChildren } from "react";
import { IdentityKitAuthType, IdentityKitAccountsSignerClientOptions, IdentityKitDelegationSignerClientOptions } from "../../../../lib";
import { SignerConfig } from "../../../../lib/types";
import { IdentityKitTheme } from "../../constants";
interface ProviderProps<T extends IdentityKitAuthType = typeof IdentityKitAuthType.ACCOUNTS> extends PropsWithChildren {
    authType?: T;
    signers?: SignerConfig[];
    featuredSigner?: SignerConfig | false;
    discoverExtensionSigners?: boolean;
    theme?: IdentityKitTheme;
    signerClientOptions?: T extends typeof IdentityKitAuthType.DELEGATION ? Omit<IdentityKitDelegationSignerClientOptions, "signer" | "crypto" | "agent"> : Omit<IdentityKitAccountsSignerClientOptions, "signer" | "crypto" | "agent">;
    onConnectFailure?: (e: Error) => unknown;
    onConnectSuccess?: () => unknown;
    onDisconnect?: () => unknown;
    realConnectDisabled?: boolean;
    crypto?: Pick<Crypto, "getRandomValues" | "randomUUID">;
    window?: Window;
    allowInternetIdentityPinAuthentication?: boolean;
}
export declare const Provider: <T extends IdentityKitAuthType>({ children, signerClientOptions, crypto, window, authType, realConnectDisabled, allowInternetIdentityPinAuthentication, discoverExtensionSigners, ...props }: ProviderProps<T>) => import("react/jsx-runtime").JSX.Element;
export {};
